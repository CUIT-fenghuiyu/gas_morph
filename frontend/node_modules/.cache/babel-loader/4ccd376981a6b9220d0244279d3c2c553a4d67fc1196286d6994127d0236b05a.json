{"ast":null,"code":"import{ethers}from'ethers';// 合约地址配置（从部署脚本更新）\nexport const CONTRACT_ADDRESSES={DEMO_NFT:\"0x5FbDB2315678afecb367f032d93F642f64180aa3\",// DemoNFT 合约地址\nPAYMASTER:\"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",// GasMorphPaymaster 合约地址\nDEPLOYER:\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"// 部署者地址\n};// 本地 Hardhat 网络配置\nexport const MONAD_CONFIG={chainId:1337,// Hardhat 本地网络\nrpcUrl:\"http://localhost:8545\",bundlerUrl:\"http://localhost:8545\",// 本地网络\nentryPoint:\"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"// 标准的 EntryPoint 地址\n};// UserOperation 接口定义\n// 模式类型\n// DemoNFT 合约 ABI（简化版本）\nexport const DEMO_NFT_ABI=[\"function mint(address to) external payable\",\"function mintForFree(address to) external\",\"function balanceOf(address owner) external view returns (uint256)\",\"function totalSupply() external view returns (uint256)\",\"function mintPrice() external view returns (uint256)\"];// GasMorphPaymaster 合约 ABI（简化版本）\nexport const PAYMASTER_ABI=[\"function startGasSession(address user, uint256 durationInSeconds) external\",\"function getSessionStatus(address user) external view returns (bool active, uint256 endTime)\",\"function sessionStorage(address user) external view returns (uint256)\"];/**\n * 创建 Provider 实例\n */export function createProvider(){return new ethers.JsonRpcProvider(MONAD_CONFIG.rpcUrl);}/**\n * 创建 Bundler Provider 实例\n */export function createBundlerProvider(){return new ethers.JsonRpcProvider(MONAD_CONFIG.bundlerUrl);}/**\n * 构建 paymasterAndData\n * @param userAddress 用户地址\n * @param mode 模式 ('nft' | 'session')\n * @returns paymasterAndData 字节串\n */export function buildPaymasterAndData(userAddress,mode){const paymasterAddress=CONTRACT_ADDRESSES.PAYMASTER;// 移除地址前缀 \"0x\"\nconst paymasterAddressBytes=paymasterAddress.slice(2);const userAddressBytes=userAddress.slice(2);// 模式字节：0x00 为 NFT 模式，0x01 为 Session 模式\nconst modeByte=mode==='nft'?'00':'01';// 组合：paymasterAddress + userAddress + mode\nreturn'0x'+paymasterAddressBytes+userAddressBytes+modeByte;}/**\n * 创建赞助的 UserOperation\n * @param tx 交易对象\n * @param userAddress 用户地址\n * @param mode 模式\n * @returns UserOperation 对象\n */export async function createSponsoredUserOp(tx,userAddress,mode){const provider=createProvider();// 获取当前 gas 价格\nconst feeData=await provider.getFeeData();// 构建 paymasterAndData\nconst paymasterAndData=buildPaymasterAndData(userAddress,mode);// 创建 UserOperation\nconst userOp={sender:userAddress,nonce:ethers.toBeHex(await provider.getTransactionCount(userAddress)),initCode:\"0x\",callData:tx.data||\"0x\",callGasLimit:ethers.toBeHex(300000),// 默认 gas 限制\nverificationGasLimit:ethers.toBeHex(100000),preVerificationGas:ethers.toBeHex(21000),maxFeePerGas:ethers.toBeHex(feeData.maxFeePerGas||0),maxPriorityFeePerGas:ethers.toBeHex(feeData.maxPriorityFeePerGas||0),paymasterAndData:paymasterAndData,signature:\"0x\"// 初始为空，由钱包签名\n};return userOp;}/**\n * 发送赞助的 UserOperation\n * @param userOp UserOperation 对象\n * @returns 交易哈希\n */export async function sendSponsoredUserOp(userOp){const bundlerProvider=createBundlerProvider();try{// 发送 UserOperation 到 Bundler\nconst response=await bundlerProvider.send('eth_sendUserOperation',[userOp,MONAD_CONFIG.entryPoint]);return response;}catch(error){console.error('发送 UserOperation 失败:',error);throw error;}}/**\n * 检查 UserOperation 状态\n * @param userOpHash UserOperation 哈希\n * @returns 状态信息\n */export async function getUserOpStatus(userOpHash){const bundlerProvider=createBundlerProvider();try{const response=await bundlerProvider.send('eth_getUserOperationByHash',[userOpHash]);return response;}catch(error){console.error('获取 UserOperation 状态失败:',error);throw error;}}/**\n * 估算 UserOperation 的 gas 成本\n * @param userOp UserOperation 对象\n * @returns gas 估算结果\n */export async function estimateUserOpGas(userOp){const bundlerProvider=createBundlerProvider();try{const response=await bundlerProvider.send('eth_estimateUserOperationGas',[userOp,MONAD_CONFIG.entryPoint]);return response;}catch(error){console.error('估算 UserOperation Gas 失败:',error);throw error;}}/**\n * 创建 NFT 铸造交易\n * @param userAddress 用户地址\n * @returns 交易对象\n */export async function createMintTransaction(userAddress){const provider=createProvider();const demoNFT=new ethers.Contract(CONTRACT_ADDRESSES.DEMO_NFT,['function mint(address to) external payable','function mintPrice() external view returns (uint256)'],provider);// 获取铸造价格\nconst mintPrice=await demoNFT.mintPrice();// 创建交易\nconst tx=await demoNFT.mint.populateTransaction(userAddress,{value:mintPrice});return tx;}/**\n * 检查用户的 NFT 余额\n * @param userAddress 用户地址\n * @returns NFT 余额\n */export async function getNFTBalance(userAddress){const provider=createProvider();const demoNFT=new ethers.Contract(CONTRACT_ADDRESSES.DEMO_NFT,['function balanceOf(address owner) external view returns (uint256)'],provider);const balance=await demoNFT.balanceOf(userAddress);return Number(balance);}/**\n * 检查用户的 Gas Session 状态\n * @param userAddress 用户地址\n * @returns Session 状态\n */export async function getSessionStatus(userAddress){const provider=createProvider();const paymaster=new ethers.Contract(CONTRACT_ADDRESSES.PAYMASTER,['function getSessionStatus(address userAddress) external view returns (bool, uint256)'],provider);const[isActive,expiryTime]=await paymaster.getSessionStatus(userAddress);return{isActive,expiryTime:Number(expiryTime)};}/**\n * 开启 Gas Session（仅限 owner 调用）\n * @param userAddress 用户地址\n * @param durationInSeconds 持续时间（秒）\n * @param signer 签名者（owner）\n */export async function startGasSession(userAddress,durationInSeconds,signer){const paymaster=new ethers.Contract(CONTRACT_ADDRESSES.PAYMASTER,['function startGasSession(address userAddress, uint256 durationInSeconds) external'],signer);return await paymaster.startGasSession(userAddress,durationInSeconds);}/**\n * 直接调用合约铸造 NFT\n * @param userAddress 用户地址\n * @param signer Signer 实例\n * @param gasSponsored 是否由 Gas 赞助\n * @returns 交易结果\n */export async function mintNFTDirect(userAddress,signer){let gasSponsored=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;try{const contract=new ethers.Contract(CONTRACT_ADDRESSES.DEMO_NFT,DEMO_NFT_ABI,signer);// 获取 mint 价格\nconst mintPrice=await contract.mintPrice();console.log('Mint 价格:',ethers.formatEther(mintPrice),'ETH');let tx;if(gasSponsored){// 如果有 Gas 赞助，通过 owner 调用 mintForFree\nconsole.log('使用 Gas 赞助铸造...');// 创建 owner 的 signer (部署者账户)\nconst provider=signer.provider;if(!provider){throw new Error('Provider not available');}// 使用部署者私钥创建 owner signer\nconst ownerSigner=new ethers.Wallet('0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80',// 部署者私钥\nprovider);const ownerContract=new ethers.Contract(CONTRACT_ADDRESSES.DEMO_NFT,DEMO_NFT_ABI,ownerSigner);// 通过 owner 免费铸造给用户\ntx=await ownerContract.mintForFree(userAddress);console.log('免费铸造交易已发送:',tx.hash);}else{// 正常付费铸造\nconsole.log('付费铸造，支付:',ethers.formatEther(mintPrice),'ETH');tx=await contract.mint(userAddress,{value:mintPrice});}console.log('交易已发送:',tx.hash);// 等待交易确认\nconst receipt=await tx.wait();console.log('交易已确认:',receipt);return{hash:tx.hash,gasSponsored,receipt};}catch(error){console.error('铸造 NFT 失败:',error);throw error;}}","map":{"version":3,"names":["ethers","CONTRACT_ADDRESSES","DEMO_NFT","PAYMASTER","DEPLOYER","MONAD_CONFIG","chainId","rpcUrl","bundlerUrl","entryPoint","DEMO_NFT_ABI","PAYMASTER_ABI","createProvider","JsonRpcProvider","createBundlerProvider","buildPaymasterAndData","userAddress","mode","paymasterAddress","paymasterAddressBytes","slice","userAddressBytes","modeByte","createSponsoredUserOp","tx","provider","feeData","getFeeData","paymasterAndData","userOp","sender","nonce","toBeHex","getTransactionCount","initCode","callData","data","callGasLimit","verificationGasLimit","preVerificationGas","maxFeePerGas","maxPriorityFeePerGas","signature","sendSponsoredUserOp","bundlerProvider","response","send","error","console","getUserOpStatus","userOpHash","estimateUserOpGas","createMintTransaction","demoNFT","Contract","mintPrice","mint","populateTransaction","value","getNFTBalance","balance","balanceOf","Number","getSessionStatus","paymaster","isActive","expiryTime","startGasSession","durationInSeconds","signer","mintNFTDirect","gasSponsored","arguments","length","undefined","contract","log","formatEther","Error","ownerSigner","Wallet","ownerContract","mintForFree","hash","receipt","wait"],"sources":["/Users/fhy/project/gasmorph/frontend/src/utils/erc4337.ts"],"sourcesContent":["import { ethers } from 'ethers';\n\n// 合约地址配置（从部署脚本更新）\nexport const CONTRACT_ADDRESSES = {\n  DEMO_NFT: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\", // DemoNFT 合约地址\n  PAYMASTER: \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\", // GasMorphPaymaster 合约地址\n  DEPLOYER: \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"  // 部署者地址\n};\n\n// 本地 Hardhat 网络配置\nexport const MONAD_CONFIG = {\n  chainId: 1337, // Hardhat 本地网络\n  rpcUrl: \"http://localhost:8545\",\n  bundlerUrl: \"http://localhost:8545\", // 本地网络\n  entryPoint: \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\" // 标准的 EntryPoint 地址\n};\n\n// UserOperation 接口定义\nexport interface UserOperation {\n  sender: string;\n  nonce: string;\n  initCode: string;\n  callData: string;\n  callGasLimit: string;\n  verificationGasLimit: string;\n  preVerificationGas: string;\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n  paymasterAndData: string;\n  signature: string;\n}\n\n// 模式类型\nexport type PaymasterMode = 'nft' | 'session';\n\n// DemoNFT 合约 ABI（简化版本）\nexport const DEMO_NFT_ABI = [\n  \"function mint(address to) external payable\",\n  \"function mintForFree(address to) external\",\n  \"function balanceOf(address owner) external view returns (uint256)\",\n  \"function totalSupply() external view returns (uint256)\",\n  \"function mintPrice() external view returns (uint256)\"\n];\n\n// GasMorphPaymaster 合约 ABI（简化版本）\nexport const PAYMASTER_ABI = [\n  \"function startGasSession(address user, uint256 durationInSeconds) external\",\n  \"function getSessionStatus(address user) external view returns (bool active, uint256 endTime)\",\n  \"function sessionStorage(address user) external view returns (uint256)\"\n];\n\n/**\n * 创建 Provider 实例\n */\nexport function createProvider(): ethers.JsonRpcProvider {\n  return new ethers.JsonRpcProvider(MONAD_CONFIG.rpcUrl);\n}\n\n/**\n * 创建 Bundler Provider 实例\n */\nexport function createBundlerProvider(): ethers.JsonRpcProvider {\n  return new ethers.JsonRpcProvider(MONAD_CONFIG.bundlerUrl);\n}\n\n/**\n * 构建 paymasterAndData\n * @param userAddress 用户地址\n * @param mode 模式 ('nft' | 'session')\n * @returns paymasterAndData 字节串\n */\nexport function buildPaymasterAndData(userAddress: string, mode: PaymasterMode): string {\n  const paymasterAddress = CONTRACT_ADDRESSES.PAYMASTER;\n  \n  // 移除地址前缀 \"0x\"\n  const paymasterAddressBytes = paymasterAddress.slice(2);\n  const userAddressBytes = userAddress.slice(2);\n  \n  // 模式字节：0x00 为 NFT 模式，0x01 为 Session 模式\n  const modeByte = mode === 'nft' ? '00' : '01';\n  \n  // 组合：paymasterAddress + userAddress + mode\n  return '0x' + paymasterAddressBytes + userAddressBytes + modeByte;\n}\n\n/**\n * 创建赞助的 UserOperation\n * @param tx 交易对象\n * @param userAddress 用户地址\n * @param mode 模式\n * @returns UserOperation 对象\n */\nexport async function createSponsoredUserOp(\n  tx: any,\n  userAddress: string,\n  mode: PaymasterMode\n): Promise<UserOperation> {\n  const provider = createProvider();\n  \n  // 获取当前 gas 价格\n  const feeData = await provider.getFeeData();\n  \n  // 构建 paymasterAndData\n  const paymasterAndData = buildPaymasterAndData(userAddress, mode);\n  \n  // 创建 UserOperation\n  const userOp: UserOperation = {\n    sender: userAddress,\n    nonce: ethers.toBeHex(await provider.getTransactionCount(userAddress)),\n    initCode: \"0x\",\n    callData: tx.data || \"0x\",\n    callGasLimit: ethers.toBeHex(300000), // 默认 gas 限制\n    verificationGasLimit: ethers.toBeHex(100000),\n    preVerificationGas: ethers.toBeHex(21000),\n    maxFeePerGas: ethers.toBeHex(feeData.maxFeePerGas || 0),\n    maxPriorityFeePerGas: ethers.toBeHex(feeData.maxPriorityFeePerGas || 0),\n    paymasterAndData: paymasterAndData,\n    signature: \"0x\" // 初始为空，由钱包签名\n  };\n  \n  return userOp;\n}\n\n/**\n * 发送赞助的 UserOperation\n * @param userOp UserOperation 对象\n * @returns 交易哈希\n */\nexport async function sendSponsoredUserOp(userOp: UserOperation): Promise<string> {\n  const bundlerProvider = createBundlerProvider();\n  \n  try {\n    // 发送 UserOperation 到 Bundler\n    const response = await bundlerProvider.send('eth_sendUserOperation', [\n      userOp,\n      MONAD_CONFIG.entryPoint\n    ]);\n    \n    return response;\n  } catch (error) {\n    console.error('发送 UserOperation 失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 检查 UserOperation 状态\n * @param userOpHash UserOperation 哈希\n * @returns 状态信息\n */\nexport async function getUserOpStatus(userOpHash: string): Promise<any> {\n  const bundlerProvider = createBundlerProvider();\n  \n  try {\n    const response = await bundlerProvider.send('eth_getUserOperationByHash', [userOpHash]);\n    return response;\n  } catch (error) {\n    console.error('获取 UserOperation 状态失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 估算 UserOperation 的 gas 成本\n * @param userOp UserOperation 对象\n * @returns gas 估算结果\n */\nexport async function estimateUserOpGas(userOp: UserOperation): Promise<any> {\n  const bundlerProvider = createBundlerProvider();\n  \n  try {\n    const response = await bundlerProvider.send('eth_estimateUserOperationGas', [\n      userOp,\n      MONAD_CONFIG.entryPoint\n    ]);\n    \n    return response;\n  } catch (error) {\n    console.error('估算 UserOperation Gas 失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 创建 NFT 铸造交易\n * @param userAddress 用户地址\n * @returns 交易对象\n */\nexport async function createMintTransaction(userAddress: string): Promise<any> {\n  const provider = createProvider();\n  const demoNFT = new ethers.Contract(\n    CONTRACT_ADDRESSES.DEMO_NFT,\n    [\n      'function mint(address to) external payable',\n      'function mintPrice() external view returns (uint256)'\n    ],\n    provider\n  );\n  \n  // 获取铸造价格\n  const mintPrice = await demoNFT.mintPrice();\n  \n  // 创建交易\n  const tx = await demoNFT.mint.populateTransaction(userAddress, {\n    value: mintPrice\n  });\n  \n  return tx;\n}\n\n/**\n * 检查用户的 NFT 余额\n * @param userAddress 用户地址\n * @returns NFT 余额\n */\nexport async function getNFTBalance(userAddress: string): Promise<number> {\n  const provider = createProvider();\n  const demoNFT = new ethers.Contract(\n    CONTRACT_ADDRESSES.DEMO_NFT,\n    ['function balanceOf(address owner) external view returns (uint256)'],\n    provider\n  );\n  \n  const balance = await demoNFT.balanceOf(userAddress);\n  return Number(balance);\n}\n\n/**\n * 检查用户的 Gas Session 状态\n * @param userAddress 用户地址\n * @returns Session 状态\n */\nexport async function getSessionStatus(userAddress: string): Promise<{isActive: boolean, expiryTime: number}> {\n  const provider = createProvider();\n  const paymaster = new ethers.Contract(\n    CONTRACT_ADDRESSES.PAYMASTER,\n    ['function getSessionStatus(address userAddress) external view returns (bool, uint256)'],\n    provider\n  );\n  \n  const [isActive, expiryTime] = await paymaster.getSessionStatus(userAddress);\n  return {\n    isActive,\n    expiryTime: Number(expiryTime)\n  };\n}\n\n/**\n * 开启 Gas Session（仅限 owner 调用）\n * @param userAddress 用户地址\n * @param durationInSeconds 持续时间（秒）\n * @param signer 签名者（owner）\n */\nexport async function startGasSession(\n  userAddress: string,\n  durationInSeconds: number,\n  signer: ethers.Signer\n): Promise<any> {\n  const paymaster = new ethers.Contract(\n    CONTRACT_ADDRESSES.PAYMASTER,\n    ['function startGasSession(address userAddress, uint256 durationInSeconds) external'],\n    signer\n  );\n  \n  return await paymaster.startGasSession(userAddress, durationInSeconds);\n}\n\n/**\n * 直接调用合约铸造 NFT\n * @param userAddress 用户地址\n * @param signer Signer 实例\n * @param gasSponsored 是否由 Gas 赞助\n * @returns 交易结果\n */\nexport async function mintNFTDirect(\n  userAddress: string,\n  signer: ethers.Signer,\n  gasSponsored: boolean = false\n): Promise<any> {\n  try {\n    const contract = new ethers.Contract(\n      CONTRACT_ADDRESSES.DEMO_NFT,\n      DEMO_NFT_ABI,\n      signer\n    );\n\n    // 获取 mint 价格\n    const mintPrice = await contract.mintPrice();\n    console.log('Mint 价格:', ethers.formatEther(mintPrice), 'ETH');\n\n    let tx;\n    if (gasSponsored) {\n      // 如果有 Gas 赞助，通过 owner 调用 mintForFree\n      console.log('使用 Gas 赞助铸造...');\n      \n      // 创建 owner 的 signer (部署者账户)\n      const provider = signer.provider;\n      if (!provider) {\n        throw new Error('Provider not available');\n      }\n      \n      // 使用部署者私钥创建 owner signer\n      const ownerSigner = new ethers.Wallet(\n        '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80', // 部署者私钥\n        provider\n      );\n      \n      const ownerContract = new ethers.Contract(\n        CONTRACT_ADDRESSES.DEMO_NFT,\n        DEMO_NFT_ABI,\n        ownerSigner\n      );\n      \n      // 通过 owner 免费铸造给用户\n      tx = await ownerContract.mintForFree(userAddress);\n      console.log('免费铸造交易已发送:', tx.hash);\n    } else {\n      // 正常付费铸造\n      console.log('付费铸造，支付:', ethers.formatEther(mintPrice), 'ETH');\n      tx = await contract.mint(userAddress, { value: mintPrice });\n    }\n\n    console.log('交易已发送:', tx.hash);\n    \n    // 等待交易确认\n    const receipt = await tx.wait();\n    console.log('交易已确认:', receipt);\n\n    return {\n      hash: tx.hash,\n      gasSponsored,\n      receipt\n    };\n\n  } catch (error) {\n    console.error('铸造 NFT 失败:', error);\n    throw error;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}