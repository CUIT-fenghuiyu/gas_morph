{"ast":null,"code":"import { ethers } from 'ethers';\n\n// 合约地址配置（部署后需要更新）\nexport const CONTRACT_ADDRESSES = {\n  DEMO_NFT: \"0x0000000000000000000000000000000000000000\",\n  // 部署后更新\n  PAYMASTER: \"0x0000000000000000000000000000000000000000\",\n  // 部署后更新\n  DEPLOYER: \"0x0000000000000000000000000000000000000000\" // 部署后更新\n};\n\n// Monad 测试网配置\nexport const MONAD_CONFIG = {\n  chainId: 1337,\n  rpcUrl: \"https://rpc.testnet.monad.xyz/\",\n  bundlerUrl: \"https://bundler.testnet.monad.xyz/\",\n  // 假设的 Bundler URL\n  entryPoint: \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\" // 标准的 EntryPoint 地址\n};\n\n// UserOperation 接口定义\n\n// 模式类型\n\n/**\n * 创建 Provider 实例\n */\nexport function createProvider() {\n  return new ethers.JsonRpcProvider(MONAD_CONFIG.rpcUrl);\n}\n\n/**\n * 创建 Bundler Provider 实例\n */\nexport function createBundlerProvider() {\n  return new ethers.JsonRpcProvider(MONAD_CONFIG.bundlerUrl);\n}\n\n/**\n * 构建 paymasterAndData\n * @param userAddress 用户地址\n * @param mode 模式 ('nft' | 'session')\n * @returns paymasterAndData 字节串\n */\nexport function buildPaymasterAndData(userAddress, mode) {\n  const paymasterAddress = CONTRACT_ADDRESSES.PAYMASTER;\n\n  // 移除地址前缀 \"0x\"\n  const paymasterAddressBytes = paymasterAddress.slice(2);\n  const userAddressBytes = userAddress.slice(2);\n\n  // 模式字节：0x00 为 NFT 模式，0x01 为 Session 模式\n  const modeByte = mode === 'nft' ? '00' : '01';\n\n  // 组合：paymasterAddress + userAddress + mode\n  return '0x' + paymasterAddressBytes + userAddressBytes + modeByte;\n}\n\n/**\n * 创建赞助的 UserOperation\n * @param tx 交易对象\n * @param userAddress 用户地址\n * @param mode 模式\n * @returns UserOperation 对象\n */\nexport async function createSponsoredUserOp(tx, userAddress, mode) {\n  const provider = createProvider();\n\n  // 获取当前 gas 价格\n  const feeData = await provider.getFeeData();\n\n  // 构建 paymasterAndData\n  const paymasterAndData = buildPaymasterAndData(userAddress, mode);\n\n  // 创建 UserOperation\n  const userOp = {\n    sender: userAddress,\n    nonce: ethers.toBeHex(await provider.getTransactionCount(userAddress)),\n    initCode: \"0x\",\n    callData: tx.data || \"0x\",\n    callGasLimit: ethers.toBeHex(300000),\n    // 默认 gas 限制\n    verificationGasLimit: ethers.toBeHex(100000),\n    preVerificationGas: ethers.toBeHex(21000),\n    maxFeePerGas: ethers.toBeHex(feeData.maxFeePerGas || 0),\n    maxPriorityFeePerGas: ethers.toBeHex(feeData.maxPriorityFeePerGas || 0),\n    paymasterAndData: paymasterAndData,\n    signature: \"0x\" // 初始为空，由钱包签名\n  };\n  return userOp;\n}\n\n/**\n * 发送赞助的 UserOperation\n * @param userOp UserOperation 对象\n * @returns 交易哈希\n */\nexport async function sendSponsoredUserOp(userOp) {\n  const bundlerProvider = createBundlerProvider();\n  try {\n    // 发送 UserOperation 到 Bundler\n    const response = await bundlerProvider.send('eth_sendUserOperation', [userOp, MONAD_CONFIG.entryPoint]);\n    return response;\n  } catch (error) {\n    console.error('发送 UserOperation 失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 检查 UserOperation 状态\n * @param userOpHash UserOperation 哈希\n * @returns 状态信息\n */\nexport async function getUserOpStatus(userOpHash) {\n  const bundlerProvider = createBundlerProvider();\n  try {\n    const response = await bundlerProvider.send('eth_getUserOperationByHash', [userOpHash]);\n    return response;\n  } catch (error) {\n    console.error('获取 UserOperation 状态失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 估算 UserOperation 的 gas 成本\n * @param userOp UserOperation 对象\n * @returns gas 估算结果\n */\nexport async function estimateUserOpGas(userOp) {\n  const bundlerProvider = createBundlerProvider();\n  try {\n    const response = await bundlerProvider.send('eth_estimateUserOperationGas', [userOp, MONAD_CONFIG.entryPoint]);\n    return response;\n  } catch (error) {\n    console.error('估算 UserOperation Gas 失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 创建 NFT 铸造交易\n * @param userAddress 用户地址\n * @returns 交易对象\n */\nexport async function createMintTransaction(userAddress) {\n  const provider = createProvider();\n  const demoNFT = new ethers.Contract(CONTRACT_ADDRESSES.DEMO_NFT, ['function mint(address to) external payable', 'function mintPrice() external view returns (uint256)'], provider);\n\n  // 获取铸造价格\n  const mintPrice = await demoNFT.mintPrice();\n\n  // 创建交易\n  const tx = await demoNFT.mint.populateTransaction(userAddress, {\n    value: mintPrice\n  });\n  return tx;\n}\n\n/**\n * 检查用户的 NFT 余额\n * @param userAddress 用户地址\n * @returns NFT 余额\n */\nexport async function getNFTBalance(userAddress) {\n  const provider = createProvider();\n  const demoNFT = new ethers.Contract(CONTRACT_ADDRESSES.DEMO_NFT, ['function balanceOf(address owner) external view returns (uint256)'], provider);\n  const balance = await demoNFT.balanceOf(userAddress);\n  return Number(balance);\n}\n\n/**\n * 检查用户的 Gas Session 状态\n * @param userAddress 用户地址\n * @returns Session 状态\n */\nexport async function getSessionStatus(userAddress) {\n  const provider = createProvider();\n  const paymaster = new ethers.Contract(CONTRACT_ADDRESSES.PAYMASTER, ['function getSessionStatus(address userAddress) external view returns (bool, uint256)'], provider);\n  const [isActive, expiryTime] = await paymaster.getSessionStatus(userAddress);\n  return {\n    isActive,\n    expiryTime: Number(expiryTime)\n  };\n}\n\n/**\n * 开启 Gas Session（仅限 owner 调用）\n * @param userAddress 用户地址\n * @param durationInSeconds 持续时间（秒）\n * @param signer 签名者（owner）\n */\nexport async function startGasSession(userAddress, durationInSeconds, signer) {\n  const paymaster = new ethers.Contract(CONTRACT_ADDRESSES.PAYMASTER, ['function startGasSession(address userAddress, uint256 durationInSeconds) external'], signer);\n  return await paymaster.startGasSession(userAddress, durationInSeconds);\n}","map":{"version":3,"names":["ethers","CONTRACT_ADDRESSES","DEMO_NFT","PAYMASTER","DEPLOYER","MONAD_CONFIG","chainId","rpcUrl","bundlerUrl","entryPoint","createProvider","JsonRpcProvider","createBundlerProvider","buildPaymasterAndData","userAddress","mode","paymasterAddress","paymasterAddressBytes","slice","userAddressBytes","modeByte","createSponsoredUserOp","tx","provider","feeData","getFeeData","paymasterAndData","userOp","sender","nonce","toBeHex","getTransactionCount","initCode","callData","data","callGasLimit","verificationGasLimit","preVerificationGas","maxFeePerGas","maxPriorityFeePerGas","signature","sendSponsoredUserOp","bundlerProvider","response","send","error","console","getUserOpStatus","userOpHash","estimateUserOpGas","createMintTransaction","demoNFT","Contract","mintPrice","mint","populateTransaction","value","getNFTBalance","balance","balanceOf","Number","getSessionStatus","paymaster","isActive","expiryTime","startGasSession","durationInSeconds","signer"],"sources":["/Users/fhy/project/gasmorph/frontend/src/utils/erc4337.ts"],"sourcesContent":["import { ethers } from 'ethers';\n\n// 合约地址配置（部署后需要更新）\nexport const CONTRACT_ADDRESSES = {\n  DEMO_NFT: \"0x0000000000000000000000000000000000000000\", // 部署后更新\n  PAYMASTER: \"0x0000000000000000000000000000000000000000\", // 部署后更新\n  DEPLOYER: \"0x0000000000000000000000000000000000000000\"  // 部署后更新\n};\n\n// Monad 测试网配置\nexport const MONAD_CONFIG = {\n  chainId: 1337,\n  rpcUrl: \"https://rpc.testnet.monad.xyz/\",\n  bundlerUrl: \"https://bundler.testnet.monad.xyz/\", // 假设的 Bundler URL\n  entryPoint: \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\" // 标准的 EntryPoint 地址\n};\n\n// UserOperation 接口定义\nexport interface UserOperation {\n  sender: string;\n  nonce: string;\n  initCode: string;\n  callData: string;\n  callGasLimit: string;\n  verificationGasLimit: string;\n  preVerificationGas: string;\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n  paymasterAndData: string;\n  signature: string;\n}\n\n// 模式类型\nexport type PaymasterMode = 'nft' | 'session';\n\n/**\n * 创建 Provider 实例\n */\nexport function createProvider(): ethers.JsonRpcProvider {\n  return new ethers.JsonRpcProvider(MONAD_CONFIG.rpcUrl);\n}\n\n/**\n * 创建 Bundler Provider 实例\n */\nexport function createBundlerProvider(): ethers.JsonRpcProvider {\n  return new ethers.JsonRpcProvider(MONAD_CONFIG.bundlerUrl);\n}\n\n/**\n * 构建 paymasterAndData\n * @param userAddress 用户地址\n * @param mode 模式 ('nft' | 'session')\n * @returns paymasterAndData 字节串\n */\nexport function buildPaymasterAndData(userAddress: string, mode: PaymasterMode): string {\n  const paymasterAddress = CONTRACT_ADDRESSES.PAYMASTER;\n  \n  // 移除地址前缀 \"0x\"\n  const paymasterAddressBytes = paymasterAddress.slice(2);\n  const userAddressBytes = userAddress.slice(2);\n  \n  // 模式字节：0x00 为 NFT 模式，0x01 为 Session 模式\n  const modeByte = mode === 'nft' ? '00' : '01';\n  \n  // 组合：paymasterAddress + userAddress + mode\n  return '0x' + paymasterAddressBytes + userAddressBytes + modeByte;\n}\n\n/**\n * 创建赞助的 UserOperation\n * @param tx 交易对象\n * @param userAddress 用户地址\n * @param mode 模式\n * @returns UserOperation 对象\n */\nexport async function createSponsoredUserOp(\n  tx: any,\n  userAddress: string,\n  mode: PaymasterMode\n): Promise<UserOperation> {\n  const provider = createProvider();\n  \n  // 获取当前 gas 价格\n  const feeData = await provider.getFeeData();\n  \n  // 构建 paymasterAndData\n  const paymasterAndData = buildPaymasterAndData(userAddress, mode);\n  \n  // 创建 UserOperation\n  const userOp: UserOperation = {\n    sender: userAddress,\n    nonce: ethers.toBeHex(await provider.getTransactionCount(userAddress)),\n    initCode: \"0x\",\n    callData: tx.data || \"0x\",\n    callGasLimit: ethers.toBeHex(300000), // 默认 gas 限制\n    verificationGasLimit: ethers.toBeHex(100000),\n    preVerificationGas: ethers.toBeHex(21000),\n    maxFeePerGas: ethers.toBeHex(feeData.maxFeePerGas || 0),\n    maxPriorityFeePerGas: ethers.toBeHex(feeData.maxPriorityFeePerGas || 0),\n    paymasterAndData: paymasterAndData,\n    signature: \"0x\" // 初始为空，由钱包签名\n  };\n  \n  return userOp;\n}\n\n/**\n * 发送赞助的 UserOperation\n * @param userOp UserOperation 对象\n * @returns 交易哈希\n */\nexport async function sendSponsoredUserOp(userOp: UserOperation): Promise<string> {\n  const bundlerProvider = createBundlerProvider();\n  \n  try {\n    // 发送 UserOperation 到 Bundler\n    const response = await bundlerProvider.send('eth_sendUserOperation', [\n      userOp,\n      MONAD_CONFIG.entryPoint\n    ]);\n    \n    return response;\n  } catch (error) {\n    console.error('发送 UserOperation 失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 检查 UserOperation 状态\n * @param userOpHash UserOperation 哈希\n * @returns 状态信息\n */\nexport async function getUserOpStatus(userOpHash: string): Promise<any> {\n  const bundlerProvider = createBundlerProvider();\n  \n  try {\n    const response = await bundlerProvider.send('eth_getUserOperationByHash', [userOpHash]);\n    return response;\n  } catch (error) {\n    console.error('获取 UserOperation 状态失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 估算 UserOperation 的 gas 成本\n * @param userOp UserOperation 对象\n * @returns gas 估算结果\n */\nexport async function estimateUserOpGas(userOp: UserOperation): Promise<any> {\n  const bundlerProvider = createBundlerProvider();\n  \n  try {\n    const response = await bundlerProvider.send('eth_estimateUserOperationGas', [\n      userOp,\n      MONAD_CONFIG.entryPoint\n    ]);\n    \n    return response;\n  } catch (error) {\n    console.error('估算 UserOperation Gas 失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 创建 NFT 铸造交易\n * @param userAddress 用户地址\n * @returns 交易对象\n */\nexport async function createMintTransaction(userAddress: string): Promise<any> {\n  const provider = createProvider();\n  const demoNFT = new ethers.Contract(\n    CONTRACT_ADDRESSES.DEMO_NFT,\n    [\n      'function mint(address to) external payable',\n      'function mintPrice() external view returns (uint256)'\n    ],\n    provider\n  );\n  \n  // 获取铸造价格\n  const mintPrice = await demoNFT.mintPrice();\n  \n  // 创建交易\n  const tx = await demoNFT.mint.populateTransaction(userAddress, {\n    value: mintPrice\n  });\n  \n  return tx;\n}\n\n/**\n * 检查用户的 NFT 余额\n * @param userAddress 用户地址\n * @returns NFT 余额\n */\nexport async function getNFTBalance(userAddress: string): Promise<number> {\n  const provider = createProvider();\n  const demoNFT = new ethers.Contract(\n    CONTRACT_ADDRESSES.DEMO_NFT,\n    ['function balanceOf(address owner) external view returns (uint256)'],\n    provider\n  );\n  \n  const balance = await demoNFT.balanceOf(userAddress);\n  return Number(balance);\n}\n\n/**\n * 检查用户的 Gas Session 状态\n * @param userAddress 用户地址\n * @returns Session 状态\n */\nexport async function getSessionStatus(userAddress: string): Promise<{isActive: boolean, expiryTime: number}> {\n  const provider = createProvider();\n  const paymaster = new ethers.Contract(\n    CONTRACT_ADDRESSES.PAYMASTER,\n    ['function getSessionStatus(address userAddress) external view returns (bool, uint256)'],\n    provider\n  );\n  \n  const [isActive, expiryTime] = await paymaster.getSessionStatus(userAddress);\n  return {\n    isActive,\n    expiryTime: Number(expiryTime)\n  };\n}\n\n/**\n * 开启 Gas Session（仅限 owner 调用）\n * @param userAddress 用户地址\n * @param durationInSeconds 持续时间（秒）\n * @param signer 签名者（owner）\n */\nexport async function startGasSession(\n  userAddress: string,\n  durationInSeconds: number,\n  signer: ethers.Signer\n): Promise<any> {\n  const paymaster = new ethers.Contract(\n    CONTRACT_ADDRESSES.PAYMASTER,\n    ['function startGasSession(address userAddress, uint256 durationInSeconds) external'],\n    signer\n  );\n  \n  return await paymaster.startGasSession(userAddress, durationInSeconds);\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}