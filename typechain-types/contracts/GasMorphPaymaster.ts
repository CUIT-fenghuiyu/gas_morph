/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type UserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  callGasLimit: bigint,
  verificationGasLimit: bigint,
  preVerificationGas: bigint,
  maxFeePerGas: bigint,
  maxPriorityFeePerGas: bigint,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  callGasLimit: bigint;
  verificationGasLimit: bigint;
  preVerificationGas: bigint;
  maxFeePerGas: bigint;
  maxPriorityFeePerGas: bigint;
  paymasterAndData: string;
  signature: string;
};

export interface GasMorphPaymasterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_postOp"
      | "_validatePaymasterUserOp"
      | "bundler"
      | "getSessionStatus"
      | "owner"
      | "renounceOwnership"
      | "sessionStorage"
      | "setBundler"
      | "sponsorshipNFT"
      | "startGasSession"
      | "startGasSessionBatch"
      | "transferOwnership"
      | "withdrawETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BundlerUpdated"
      | "GasSessionStarted"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_postOp",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_validatePaymasterUserOp",
    values: [UserOperationStruct, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bundler", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSessionStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sessionStorage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBundler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorshipNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startGasSession",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startGasSessionBatch",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_postOp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_validatePaymasterUserOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bundler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSessionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sessionStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBundler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sponsorshipNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startGasSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startGasSessionBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
}

export namespace BundlerUpdatedEvent {
  export type InputTuple = [oldBundler: AddressLike, newBundler: AddressLike];
  export type OutputTuple = [oldBundler: string, newBundler: string];
  export interface OutputObject {
    oldBundler: string;
    newBundler: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GasSessionStartedEvent {
  export type InputTuple = [user: AddressLike, expiryTime: BigNumberish];
  export type OutputTuple = [user: string, expiryTime: bigint];
  export interface OutputObject {
    user: string;
    expiryTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GasMorphPaymaster extends BaseContract {
  connect(runner?: ContractRunner | null): GasMorphPaymaster;
  waitForDeployment(): Promise<this>;

  interface: GasMorphPaymasterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _postOp: TypedContractMethod<
    [mode: BigNumberish, context: BytesLike, actualGasCost: BigNumberish],
    [void],
    "nonpayable"
  >;

  _validatePaymasterUserOp: TypedContractMethod<
    [userOp: UserOperationStruct, userOpHash: BytesLike, maxCost: BigNumberish],
    [[string, bigint] & { context: string; validationData: bigint }],
    "view"
  >;

  bundler: TypedContractMethod<[], [string], "view">;

  getSessionStatus: TypedContractMethod<
    [userAddress: AddressLike],
    [[boolean, bigint]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sessionStorage: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  setBundler: TypedContractMethod<
    [_bundler: AddressLike],
    [void],
    "nonpayable"
  >;

  sponsorshipNFT: TypedContractMethod<[], [string], "view">;

  startGasSession: TypedContractMethod<
    [userAddress: AddressLike, durationInSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  startGasSessionBatch: TypedContractMethod<
    [userAddresses: AddressLike[], durationInSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawETH: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_postOp"
  ): TypedContractMethod<
    [mode: BigNumberish, context: BytesLike, actualGasCost: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_validatePaymasterUserOp"
  ): TypedContractMethod<
    [userOp: UserOperationStruct, userOpHash: BytesLike, maxCost: BigNumberish],
    [[string, bigint] & { context: string; validationData: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "bundler"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSessionStatus"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [[boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sessionStorage"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setBundler"
  ): TypedContractMethod<[_bundler: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sponsorshipNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "startGasSession"
  ): TypedContractMethod<
    [userAddress: AddressLike, durationInSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startGasSessionBatch"
  ): TypedContractMethod<
    [userAddresses: AddressLike[], durationInSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BundlerUpdated"
  ): TypedContractEvent<
    BundlerUpdatedEvent.InputTuple,
    BundlerUpdatedEvent.OutputTuple,
    BundlerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GasSessionStarted"
  ): TypedContractEvent<
    GasSessionStartedEvent.InputTuple,
    GasSessionStartedEvent.OutputTuple,
    GasSessionStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "BundlerUpdated(address,address)": TypedContractEvent<
      BundlerUpdatedEvent.InputTuple,
      BundlerUpdatedEvent.OutputTuple,
      BundlerUpdatedEvent.OutputObject
    >;
    BundlerUpdated: TypedContractEvent<
      BundlerUpdatedEvent.InputTuple,
      BundlerUpdatedEvent.OutputTuple,
      BundlerUpdatedEvent.OutputObject
    >;

    "GasSessionStarted(address,uint256)": TypedContractEvent<
      GasSessionStartedEvent.InputTuple,
      GasSessionStartedEvent.OutputTuple,
      GasSessionStartedEvent.OutputObject
    >;
    GasSessionStarted: TypedContractEvent<
      GasSessionStartedEvent.InputTuple,
      GasSessionStartedEvent.OutputTuple,
      GasSessionStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
